#import libraries and check the versions of libraries
import sys
print('Python: {}'.format(sys.version))

import os
print('os: {}'.format(os.version))

import cv2
print('cv2: {}'.format(cv2.__version__))

import numpy as np
print('np: {}'.format(np.__version__))

from matplotlib import pyplot as plt
print('matplotlib: {}'.format(plt.__version__))

import h5py
print('h5py: {}'.format(h5py.__version__))

import pandas as pd
print('pandas: {}'.format(pd.__version__))


import json
print('json: {}'.format(json.__version__))

from PIL import Image
print('PiL: {}'.format(Image.__version__))

#***************EXTRACT PIXELS FROM ANNOTATED PATCHES AND LABEL**************************************

#===directory for the stored images
E = 'F:\\New_process\\trial_35_35_only'

#===opening reading json file and the corresponding image bounding boxes
via = {}
with open('trial_new_35_35.json', 'r') as f:
    via = json.load(f)

#===Extract pixels from the annotated patches
final_data= []
for fid in via['_via_img_metadata']:
    fn = os.path.join(E, via['_via_img_metadata'][fid]['filename'])
    if not os.path.isfile(fn):
        print('File not found! %s' %(fn))
        continue
    im = Image.open(fn)
    imwidth, imheight = im.size
    rindex = 0

    #===get the cordinates of patches shape
    for region in via['_via_img_metadata'][fid]['regions']:
        if region['shape_attributes']['name'] != 'rect':
            print('extraction of %s regions not yet implemented!' % region['shape_attributes']['name'])
            continue
        x = region['shape_attributes']['x']
        y = region['shape_attributes']['y']
        w = region['shape_attributes']['width']
        h = region['shape_attributes']['height']

        left = max(0, x)
        top = max(0, y)
        right = min(imwidth, x + w)
        bottom = min(imheight, y + h)
        crop = im.crop((left, top, right, bottom))
        rindex = rindex + 1
        extold = os.path.splitext(via['_via_img_metadata'][fid]['filename'])[1]
        extnew = extold.replace('.', '_' + str(rindex) + '.')
        cropname = via['_via_img_metadata'][fid]['filename'].replace(extold, extnew)
        #print(cropname)

        #===Transformation of image colour spaces (RGB,HSV, Luv, LAB, HSL, YCrCb,YUV)
        # BGR to RGB
        crop = cv2.cvtColor(np.array(crop), cv2.COLOR_BGR2RGB)
        img_rgb = crop.reshape(-1, 3)

        #BGR to HSV
        hsv = cv2.cvtColor(np.array(crop), cv2.COLOR_BGR2HSV)
        img_hsv = hsv.reshape(-1, 3)

        #BGR to LAB
        lab = cv2.cvtColor(np.array(crop), cv2.COLOR_BGR2LAB)
        img_lab = lab.reshape(-1, 3)

        #BGR to HLS
        hsi = cv2.cvtColor(np.array(crop), cv2.COLOR_RGB2HLS)
        img_hsi = hsi.reshape(-1, 3)

        #BGR to Luv colour space
        luv = cv2.cvtColor(np.array(crop), cv2.COLOR_RGB2LUV)
        img_luv = luv.reshape(-1, 3)

        #RGB to YCrCb
        ybr = cv2.cvtColor(np.array(crop), cv2.COLOR_RGB2YCrCb)
        img_ybr = luv.reshape(-1, 3)

        #RGB to YUV
        yuv = cv2.cvtColor(np.array(crop), cv2.COLOR_RGB2YUV)
        img_yuv = yuv.reshape(-1, 3)

        # getting the XYZ chromatic coordinates of the RGB image
        R,G,B = cv2.split(crop)
        r= R/(R+G+B)
        g= G/(R+G+B)
        b= B/(R+G+B)
        # final_nRGB= r+g+b
        hh = np.dstack((b, g, r))
        nx, ny, ns = hh.shape
        final_n = hh.reshape(nx * ny, ns)
        out_images = np.array(final_n.astype(int))
        final_nRGB = out_images.astype(np.uint8)

        #===Extracting individual pixels from the color spaces
        data_attach = []
        for f in range(img_rgb.shape[0] and img_hsv.shape[0] and img_lab.shape[0] and img_hsi.shape[0] and img_luv.shape[0] and
                       img_ybr.shape[0] and img_yuv.shape[0] and final_nRGB.shape[0]):
            data = np.hstack([img_rgb[f, 0], img_rgb[f, 1], img_rgb[f, 2],
                              img_hsv[f, 0], img_hsv[f, 1], img_hsv[f, 2],
                              img_lab[f, 0], img_lab[f, 1], img_lab[f, 2],
                              img_hsi[f, 0], img_hsi[f, 1], img_hsi[f, 2],
                              img_luv[f, 0], img_luv[f, 1], img_luv[f, 2],
                              img_ybr[f, 0], img_ybr[f, 1], img_ybr[f, 2],
                              img_yuv[f, 0], img_yuv[f, 1], img_yuv[f, 2],
                              final_nRGB[f, 0], final_nRGB[f, 1], final_nRGB[f, 2]])

            #labeling the region of interest
            labels = str(region['region_attributes'])
            labels2 = labels[12:16]

            #===Labeling the pixels as foreground or background
            if labels2 == "fore":
                    data= np.append(data, int(1))
            elif labels2 == "back":
                    data= np.append(data, int(0))

            data_attach.append(data)
        final_data.extend((data_attach))

dd= pd.DataFrame(final_data)
datat2= dd

#===Storing data and labels in hdf5 file
db = h5py.File('cowpea_200_only', 'w')
dataset = db.create_dataset('datasetName', data= datat2, dtype="float")
db.close()